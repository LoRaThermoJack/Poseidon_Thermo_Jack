#include <SPI.h>                  // Include libraries
#include <LoRa.h>
#include "LiquidCrystal_I2C.h"
#include <Wire.h>
#include <WiFiEsp.h>
#include <WiFiEspClient.h>
#include <PubSubClient.h>         // MQTT library

#define PCF8574  0x27
#define PCF8574A 0x3F

TwoWire Wire_00(i2c0, 0, 1);      // SDA, SCL
LiquidCrystal_I2C lcd(&Wire_00, PCF8574, 16, 2);

// WiFi and MQTT Configuration
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqttServer = "your_MQTT_broker_IP";
const int mqttPort = 1883;
const char* mqttUser = "your_MQTT_username";
const char* mqttPassword = "your_MQTT_password";
const char* topic = "sensor/data";

WiFiEspClient espClient;
PubSubClient client(espClient);

String outgoing;                  // Outgoing message
byte msgCount = 0;                // Count of outgoing messages
byte MasterNode = 0xFF;
byte Node2 = 0xCC;
#define nss 8
#define rst 9
#define dio0 7

void setup() {
  Serial.begin(115200);               // Initialize Serial
  Wire_00.begin();
  Wire_00.setClock(100000);           // 100kHz
  lcd.begin();
  lcd.backlight();
  
  LoRa.setPins(nss, rst, dio0);
  
  if (!LoRa.begin(433E6)) {           // Initialize LoRa at 433 MHz
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                     // If failed, do nothing
  }
  Serial.println("LoRa init succeeded.");

  // Initialize WiFi
  WiFi.init(&Serial1);                // Initialize ESP8266 (Serial1)
  connectToWiFi();

  // Initialize MQTT
  client.setServer(mqttServer, mqttPort);
  connectToMQTT();
}

void loop() {
  if (!client.connected()) {
    connectToMQTT();
  }
  client.loop();
  
  onReceive(LoRa.parsePacket());
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected to WiFi.");
}

void connectToMQTT() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("PicoW_Receiver", mqttUser, mqttPassword)) {
      Serial.println("connected");
    } else {
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void onReceive(int packetSize) {
  if (packetSize == 0) return;       // If there's no packet, return

  // Read packet header bytes:
  int recipient = LoRa.read();       // Recipient address
  byte sender = LoRa.read();         // Sender address
  byte incomingMsgId = LoRa.read();  // Incoming msg ID
  byte incomingLength = LoRa.read(); // Incoming msg length

  String incoming = "";

  while (LoRa.available()) {
    incoming += (char)LoRa.read();
  }

  if (incomingLength != incoming.length()) { // Check length for error
    return;                                  // Skip rest of function
  }

  // If the recipient isn't this device or broadcast
  if (recipient != Node2 && recipient != MasterNode) {
    return;                                  // Skip rest of function
  }

  // Process incoming data (assuming data format like: "AX:100,AY:150,AZ:200,PR:75,PT:120,TMP:25,GPS:51.5074,-0.1278")
  String accelX = getValue(incoming, ',', 0).substring(3);
  String accelY = getValue(incoming, ',', 1).substring(3);
  String accelZ = getValue(incoming, ',', 2).substring(3);
  String pulseRate = getValue(incoming, ',', 3).substring(3);
  String peltierTemp = getValue(incoming, ',', 4).substring(3);
  String temperature = getValue(incoming, ',', 5).substring(4);
  String gpsCoordinates = getValue(incoming, ',', 6).substring(4);

  // Display on LCD
  lcd.clear();
  lcd.print("Temp: " + temperature + "C");
  lcd.setCursor(0, 1);
  lcd.print("GPS: " + gpsCoordinates);

  // Print to Serial
  Serial.println("Received Data:");
  Serial.println("AccelX: " + accelX + ", AccelY: " + accelY + ", AccelZ: " + accelZ);
  Serial.println("Pulse Rate: " + pulseRate);
  Serial.println("Peltier Temp: " + peltierTemp);
  Serial.println("Temperature: " + temperature);
  Serial.println("GPS Coordinates: " + gpsCoordinates);

  // Publish to MQTT
  String payload = "{\"AccelX\":" + accelX + ",\"AccelY\":" + accelY + ",\"AccelZ\":" + accelZ +
                   ",\"PulseRate\":" + pulseRate + ",\"PeltierTemp\":" + peltierTemp +
                   ",\"Temperature\":" + temperature + ",\"GPS\":\"" + gpsCoordinates + "\"}";
  client.publish(topic, payload.c_str());

  delay(1000); // Adjust delay as necessary
}

String getValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;

  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i + 1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
